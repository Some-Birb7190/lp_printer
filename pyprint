#!/bin/env python3
# Built using https://github.com/python-escpos/python-escpos library

from fcntl import F_SEAL_SEAL
from escpos.printer import Usb
import argparse
import sys

parser = argparse.ArgumentParser(description="Program to print silly little things off to silly little printer. By default will just print off Content.")
parser.add_argument('-q', help="Print off a QR code of the Content.", action='store_true')
parser.add_argument('-i', help="Print off an image from the path of Content (Can be a bit dodgy).", action='store_true')
parser.add_argument('-b', help="Print off a barcode (CODE128) of Content (Can be a bit dodgy).", action='store_true')
parser.add_argument('-nc', help="Pass to not cut the paper after printing.", action='store_true')
parser.add_argument("Content", type=str, help="The file/text you want to print/encode.")
args = parser.parse_args()

# validate arguments
if (args.q == True and args.i == True): # cannot print image and qr code at once
    print("You cannot print a QR code of an image.")
    sys.exit(1) # generic non 0 exit code
elif (args.b == True and args.i == True): # cannot print image and barcode at once
    print("You cannot print a barcode of an image.")
    sys.exit(1) # generic non 0 exit code
elif (args.q == True and args.b == True): # canot print barcode and qr code at the same time
    print("You cannot print a barcode and a QR code at the same time.")
    sys.exit(1) # generic non 0 exit code

# initialise the device over usb
device = Usb(idVendor=0x0416, idProduct=0x5011, timeout=0, in_ep=0x81, out_ep=0x03)

# doing text
#device.text("Hello\n")

# doing barcodes
#device.barcode(code="boob", bc="CODE128", function_type="B", height=64, width=4)

# doing images
#device.image("/home/hbirb/birb.ico")

# making qr code
#device.qr(content="You are gay", size=10, model=2)

if (args.i == True): # only args.i should be true by this point
    device.image(str(args.Content))

elif (args.q == True): # does the user want to print a qr code of content
    device.qr(content=str(args.Content), size=10, model=2)
    args.nc = False

elif (args.b == True): # do they also want to print a barcode of content
    if (len(args.Content) > 5):
        w = 3
    else:
        w = 4
    device.barcode(code=str(args.Content), bc="CODE128", function_type="B", height=64, width=w)
    args.nc = False

else: # they dont want to print any barcodes or anything, just output the Content
    device.text(str(args.Content) + "\n")

# end with carriage returning and cutting the paper if the user wants it
if (args.nc == False):
    device.cut()

sys.exit(0) # finish with a nice 0 exit code
